/*
===============================================================================
Measures Exploration (Key Metrics)
===============================================================================
Purpose:
    - To calculate aggregated metrics (e.g., totals, averages) for quick insights.
    - To identify overall trends or spot anomalies.

SQL Functions Used:
    - COUNT(), SUM(), AVG()
===============================================================================
*/

		--Find the total customers by country
		SELECT country,
			COUNT(customer_key) as total_customers  
		FROM gold.dim_customers
		GROUP BY country
		ORDER BY total_customers DESC;

		--FInd the total customer by gender
		SELECT gender,
			COUNT(customer_key) as total_customers  
		FROM gold.dim_customers
		GROUP BY gender
		ORDER BY total_customers DESC;

		--Find the total products by category

		SELECT category,
			COUNT(product_name) as total_products 
		FROM gold.dim_products
		GROUP BY category
		ORDER BY total_products DESC;

		--what is the average cost in each category?
		SELECT category,
			AVG(product_cost) as average_cost 
		FROM gold.dim_products
		GROUP BY category
		ORDER BY average_cost DESC;

		--What is the total revenue generated by each category

		SELECT 
			p.category,
			SUM(d.sales) as total_revenue
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_products p
		ON p.product_key = d.product_key
		GROUP BY p.category
		ORDER BY total_revenue DESC;

		--Find total revenue generated by each customer

		SELECT 
			p.customer_id,
			p.first_name,
			p.last_name,
			SUM(d.sales) as total_revenue
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_customers p
		ON p.customer_key = d.customer_key
		GROUP BY
			p.customer_id,
			p.first_name,
			p.last_name
		ORDER BY total_revenue DESC;

		--what is the distribution of sold items across countries?
		SELECT 
			c.country,
			SUM(d.quantity) as total_sold_item
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_customers c
		ON c.customer_key = d.customer_key
		GROUP BY
			c.country
		ORDER BY total_sold_item DESC;

		 -- Rank[Dimensio] By [Measure]
		 -- Which five products generates the highest revenue?

		 SELECT TOP 5
			p.product_name,
			SUM(d.sales) as total_revenue
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_products p
		ON p.product_key = d.product_key
		GROUP BY p.product_name
		ORDER BY total_revenue DESC;

		-- 
		-- Which five  worsr- perfoming products in terms of sales?

		 SELECT TOP 5
			p.product_name,
			SUM(d.sales) as total_revenue
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_products p
		ON p.product_key = d.product_key
		GROUP BY p.product_name
		ORDER BY total_revenue;

		-- Best 5 subcategories with highest revenue
		 SELECT TOP 5
			p.subcategory,
			SUM(d.sales) as total_revenue
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_products p
		ON p.product_key = d.product_key
		GROUP BY p.subcategory
		ORDER BY total_revenue DESC;

		-- using window function for ranking

		SELECT * FROM (
		 SELECT 
			p.product_name,
			SUM(d.sales) as total_revenue,
			ROW_NUMBER() OVER (ORDER BY SUM(d.sales) DESC) as rank_product
		FROM gold.fact_sales d
		LEFT JOIN gold.dim_products p
		ON p.product_key = d.product_key
		GROUP BY p.product_name)r
		WHERE rank_product <5 ;
